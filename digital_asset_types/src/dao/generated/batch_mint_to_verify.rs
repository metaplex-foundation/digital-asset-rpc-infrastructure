//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use super::sea_orm_active_enums::BatchMintFailStatus;
use super::sea_orm_active_enums::BatchMintPersistingState;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "batch_mint_to_verify"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub file_hash: String,
    pub url: String,
    pub created_at_slot: i64,
    pub signature: String,
    pub staker: Vec<u8>,
    pub collection: Option<Vec<u8>>,
    pub download_attempts: i32,
    pub batch_mint_persisting_state: BatchMintPersistingState,
    pub batch_mint_fail_status: Option<BatchMintFailStatus>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    FileHash,
    Url,
    CreatedAtSlot,
    Signature,
    Staker,
    Collection,
    DownloadAttempts,
    BatchMintPersistingState,
    BatchMintFailStatus,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    FileHash,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::FileHash => ColumnType::String(None).def(),
            Self::Url => ColumnType::String(None).def(),
            Self::CreatedAtSlot => ColumnType::BigInteger.def(),
            Self::Signature => ColumnType::String(None).def(),
            Self::Staker => ColumnType::Binary.def(),
            Self::Collection => ColumnType::Binary.def().null(),
            Self::DownloadAttempts => ColumnType::Integer.def(),
            Self::BatchMintPersistingState => BatchMintPersistingState::db_type(),
            Self::BatchMintFailStatus => BatchMintFailStatus::db_type().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
