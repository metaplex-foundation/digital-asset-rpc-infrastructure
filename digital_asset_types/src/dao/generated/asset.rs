//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use super::sea_orm_active_enums::OwnerType;
use super::sea_orm_active_enums::RoyaltyTargetType;
use super::sea_orm_active_enums::SpecificationAssetClass;
use super::sea_orm_active_enums::SpecificationVersions;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "asset"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: Vec<u8>,
    pub alt_id: Option<Vec<u8>>,
    pub specification_version: Option<SpecificationVersions>,
    pub specification_asset_class: Option<SpecificationAssetClass>,
    pub owner: Option<Vec<u8>>,
    pub owner_type: OwnerType,
    pub delegate: Option<Vec<u8>>,
    pub frozen: bool,
    pub supply: i64,
    pub supply_mint: Option<Vec<u8>>,
    pub compressed: bool,
    pub compressible: bool,
    pub seq: Option<i64>,
    pub tree_id: Option<Vec<u8>>,
    pub leaf: Option<Vec<u8>>,
    pub nonce: Option<i64>,
    pub royalty_target_type: RoyaltyTargetType,
    pub royalty_target: Option<Vec<u8>>,
    pub royalty_amount: i32,
    pub asset_data: Option<Vec<u8>>,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub burnt: bool,
    pub slot_updated: Option<i64>,
    pub slot_updated_metadata_account: Option<i64>,
    pub slot_updated_mint_account: Option<i64>,
    pub slot_updated_token_account: Option<i64>,
    pub slot_updated_cnft_transaction: Option<i64>,
    pub data_hash: Option<String>,
    pub creator_hash: Option<String>,
    pub owner_delegate_seq: Option<i64>,
    pub leaf_seq: Option<i64>,
    pub base_info_seq: Option<i64>,
    pub mpl_core_plugins: Option<Json>,
    pub mpl_core_unknown_plugins: Option<Json>,
    pub mpl_core_collection_num_minted: Option<i32>,
    pub mpl_core_collection_current_size: Option<i32>,
    pub mpl_core_plugins_json_version: Option<i32>,
    pub mpl_core_external_plugins: Option<Json>,
    pub mpl_core_unknown_external_plugins: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    AltId,
    SpecificationVersion,
    SpecificationAssetClass,
    Owner,
    OwnerType,
    Delegate,
    Frozen,
    Supply,
    SupplyMint,
    Compressed,
    Compressible,
    Seq,
    TreeId,
    Leaf,
    Nonce,
    RoyaltyTargetType,
    RoyaltyTarget,
    RoyaltyAmount,
    AssetData,
    CreatedAt,
    Burnt,
    SlotUpdated,
    SlotUpdatedMetadataAccount,
    SlotUpdatedMintAccount,
    SlotUpdatedTokenAccount,
    SlotUpdatedCnftTransaction,
    DataHash,
    CreatorHash,
    OwnerDelegateSeq,
    LeafSeq,
    BaseInfoSeq,
    MplCorePlugins,
    MplCoreUnknownPlugins,
    MplCoreCollectionNumMinted,
    MplCoreCollectionCurrentSize,
    MplCorePluginsJsonVersion,
    MplCoreExternalPlugins,
    MplCoreUnknownExternalPlugins,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Vec<u8>;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Binary.def(),
            Self::AltId => ColumnType::Binary.def().null(),
            Self::SpecificationVersion => SpecificationVersions::db_type().null(),
            Self::SpecificationAssetClass => SpecificationAssetClass::db_type().null(),
            Self::Owner => ColumnType::Binary.def().null(),
            Self::OwnerType => OwnerType::db_type(),
            Self::Delegate => ColumnType::Binary.def().null(),
            Self::Frozen => ColumnType::Boolean.def(),
            Self::Supply => ColumnType::BigInteger.def(),
            Self::SupplyMint => ColumnType::Binary.def().null(),
            Self::Compressed => ColumnType::Boolean.def(),
            Self::Compressible => ColumnType::Boolean.def(),
            Self::Seq => ColumnType::BigInteger.def().null(),
            Self::TreeId => ColumnType::Binary.def().null(),
            Self::Leaf => ColumnType::Binary.def().null(),
            Self::Nonce => ColumnType::BigInteger.def().null(),
            Self::RoyaltyTargetType => RoyaltyTargetType::db_type(),
            Self::RoyaltyTarget => ColumnType::Binary.def().null(),
            Self::RoyaltyAmount => ColumnType::Integer.def(),
            Self::AssetData => ColumnType::Binary.def().null(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def().null(),
            Self::Burnt => ColumnType::Boolean.def(),
            Self::SlotUpdated => ColumnType::BigInteger.def().null(),
            Self::SlotUpdatedMetadataAccount => ColumnType::BigInteger.def().null(),
            Self::SlotUpdatedMintAccount => ColumnType::BigInteger.def().null(),
            Self::SlotUpdatedTokenAccount => ColumnType::BigInteger.def().null(),
            Self::SlotUpdatedCnftTransaction => ColumnType::BigInteger.def().null(),
            Self::DataHash => ColumnType::Char(Some(50u32)).def().null(),
            Self::CreatorHash => ColumnType::Char(Some(50u32)).def().null(),
            Self::OwnerDelegateSeq => ColumnType::BigInteger.def().null(),
            Self::LeafSeq => ColumnType::BigInteger.def().null(),
            Self::BaseInfoSeq => ColumnType::BigInteger.def().null(),
            Self::MplCorePlugins => ColumnType::JsonBinary.def().null(),
            Self::MplCoreUnknownPlugins => ColumnType::JsonBinary.def().null(),
            Self::MplCoreCollectionNumMinted => ColumnType::Integer.def().null(),
            Self::MplCoreCollectionCurrentSize => ColumnType::Integer.def().null(),
            Self::MplCorePluginsJsonVersion => ColumnType::Integer.def().null(),
            Self::MplCoreExternalPlugins => ColumnType::JsonBinary.def().null(),
            Self::MplCoreUnknownExternalPlugins => ColumnType::JsonBinary.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
