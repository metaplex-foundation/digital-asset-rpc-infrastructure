//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "mpl_core"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub asset_id: Vec<u8>,
    pub seq: Option<i64>,
    pub slot_updated: Option<i64>,
    pub plugins: Option<Json>,
    pub unknown_plugins: Option<Json>,
    pub plugins_json_version: Option<i32>,
    pub collection_num_minted: Option<i32>,
    pub collection_current_size: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    AssetId,
    Seq,
    SlotUpdated,
    Plugins,
    UnknownPlugins,
    PluginsJsonVersion,
    CollectionNumMinted,
    CollectionCurrentSize,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::AssetId => ColumnType::Binary.def(),
            Self::Seq => ColumnType::BigInteger.def().null(),
            Self::SlotUpdated => ColumnType::BigInteger.def().null(),
            Self::Plugins => ColumnType::JsonBinary.def().null(),
            Self::UnknownPlugins => ColumnType::JsonBinary.def().null(),
            Self::PluginsJsonVersion => ColumnType::Integer.def().null(),
            Self::CollectionNumMinted => ColumnType::Integer.def().null(),
            Self::CollectionCurrentSize => ColumnType::Integer.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
